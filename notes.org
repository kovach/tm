* rules

 - (f> , <g) -> error (see Notes section)
 - 
 - ( , token) -> {( , copy meaning_i)}
    where {meaning_i} is a set of meanings for token
 - (f> , x) -> (f> x , )
 -           | ( , f(x))
 - (x , <g) -> ( , g(x))
 - (x , y) -> (x y , )

Level 0 instruction set

store Name x
copy Name Name
unify a b
split a b
stop

update? for stacks
  ? push a b
  ? pop Name a

Level 1 instruction set
left name
right name
done name

* Notes
** errors
for (f> , <g) could do a best guess
  -> ( , f(E) <g)
   | (f> , g(E))

where E is a Var with some form of annotation
that the parse is a failure. Any resulting parse
that otherwise looks ok (single node on stack)
could be suggested - the inserted vars will carry
information on what was missing.

** interpreter
can't use state monad
want to explore shortest paths first
single step interpreter lets us interpose on instructions

** negation
currently we use "term sets" (let's call them "closed")
they describe a set of values a node can take.
the intersection of term sets is a term set, e.g.
  T a Var /\ T Var b == T a b
and to form a union, we branch execution.

might want to form the complement of a term set, like [not (A Var)];
this requires keeping a list for each entity (representing the
intersection of the complements of its elements) and complicating
the unify procedure somewhat, but it's clear what to do.

is this an optimization in the sense that, any algorithm whose
correct outcome depends on it could be rewritten to not depend on
it?
